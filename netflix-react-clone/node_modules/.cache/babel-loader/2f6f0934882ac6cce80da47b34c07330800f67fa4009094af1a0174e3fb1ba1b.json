{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from '../api/axios';\nimport React, { useEffect, useState } from 'react';\nimport requests from '../api/requests';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Banner() {\n  _s();\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    // 현재 상영중인 영화 정보를 가져오기(여러 영화)\n    const request = await axios.get(requests.fetchNowPlaying);\n    // 여러 영화 중 영화 하나의 ID를 가져오기\n    const movieID = request.data.results[Math.floor(Math.random() * request.data.results.length)].id;\n\n    // 특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\n    const {\n      data: movieDetail\n    } = await axios.get(`movie/${movieID}`, {\n      params: {\n        append_to_responce: \"video\"\n      }\n    });\n    setMovie(movieDetail);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Banner, \"jmRb9xsBKsoKCGHCjtfP3JDQESc=\");\n_c = Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["axios","React","useEffect","useState","requests","Fragment","_Fragment","jsxDEV","_jsxDEV","Banner","_s","movie","setMovie","fetchData","request","get","fetchNowPlaying","movieID","data","results","Math","floor","random","length","id","movieDetail","params","append_to_responce","_c","$RefreshReg$"],"sources":["/Users/angel/Desktop/react-netflix-clone/src/components/Banner.js"],"sourcesContent":["import axios from '../api/axios';\nimport React, { useEffect, useState } from 'react'\nimport requests from '../api/requests';\n\nexport default function Banner() {\n    const [movie, setMovie] = useState([]);\n    \n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    const fetchData = async () => {\n    // 현재 상영중인 영화 정보를 가져오기(여러 영화)\n    const request = await axios.get(requests.fetchNowPlaying);\n    // 여러 영화 중 영화 하나의 ID를 가져오기\n    const movieID = request.data.results[\n        Math.floor(Math.random() * request.data.results.length)\n    ].id;\n\n    // 특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\n    const {data: movieDetail} = await axios.get(`movie/${movieID}`, {\n        params: {append_to_responce : \"video\"},\n    });\n    setMovie(movieDetail);\n    };\n    \n  return (\n    <>\n\n\n    </>\n  )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZW,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC9B;IACA,MAAMC,OAAO,GAAG,MAAMd,KAAK,CAACe,GAAG,CAACX,QAAQ,CAACY,eAAe,CAAC;IACzD;IACA,MAAMC,OAAO,GAAGH,OAAO,CAACI,IAAI,CAACC,OAAO,CAChCC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,OAAO,CAACI,IAAI,CAACC,OAAO,CAACI,MAAM,CAAC,CAC1D,CAACC,EAAE;;IAEJ;IACA,MAAM;MAACN,IAAI,EAAEO;IAAW,CAAC,GAAG,MAAMzB,KAAK,CAACe,GAAG,CAAE,SAAQE,OAAQ,EAAC,EAAE;MAC5DS,MAAM,EAAE;QAACC,kBAAkB,EAAG;MAAO;IACzC,CAAC,CAAC;IACFf,QAAQ,CAACa,WAAW,CAAC;EACrB,CAAC;EAEH,oBACEjB,OAAA,CAAAF,SAAA,mBAGE,CAAC;AAEP;AAACI,EAAA,CA5BuBD,MAAM;AAAAmB,EAAA,GAANnB,MAAM;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}